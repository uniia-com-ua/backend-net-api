name: UNIIA Admin - Docker CI/CD with Fleet

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Derive service and version from release tag
        id: meta
        run: |
          TAG="${{ github.event.release.tag_name }}"

          if [[ "$TAG" == admin-auth-* ]]; then
            SERVICE="admin-auth"
            IMAGE_NAME="uniia-admin-auth"
            SERVICE_PATH="UniiaAdmin.Auth"
            PACKAGE_PATH="UniiaAdmin.Auth/UniiaAdmin.Auth.csproj"
            FLEET_PATH="UniiaAdmin.Auth/fleet"
            TITLE="Admin Auth API"
            DESC="UNIIA Admin Authentication Service"
          elif [[ "$TAG" == admin-api-* ]]; then
            SERVICE="admin-api"
            IMAGE_NAME="uniia-admin-api"
            SERVICE_PATH="UNIIAadminAPI"
            PACKAGE_PATH="UNIIAadminAPI/UniiaAdmin.WebApi.csproj"
            FLEET_PATH="UNIIAadminAPI/fleet"
            TITLE="Admin Main API"
            DESC="UNIIA Admin Main API"
          else
            echo "Unsupported release tag: $TAG. Use admin-auth-* or admin-api-*"
            exit 1
          fi

          VERSION="${TAG#${SERVICE}-}"

          {
            echo "SERVICE=$SERVICE"
            echo "VERSION=$VERSION"
            echo "IMAGE_NAME=$IMAGE_NAME"
            echo "SERVICE_PATH=$SERVICE_PATH"
            echo "FLEET_PATH=$FLEET_PATH"
            echo "TITLE=$TITLE"
            echo "DESC=$DESC"
          } >> "$GITHUB_OUTPUT"

          echo "Release tag: $TAG"
          echo "Service: $SERVICE"
          echo "Version: $VERSION"

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ${{ steps.meta.outputs.PACKAGE_PATH }}

      - name: Build
        run: dotnet build ${{ steps.meta.outputs.PACKAGE_PATH }} --no-restore

      - name: Test
        run: dotnet test ${{ steps.meta.outputs.PACKAGE_PATH }} --no-build --verbosity normal

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ steps.meta.outputs.SERVICE_PATH }}/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/uniia-com-ua/${{ steps.meta.outputs.IMAGE_NAME }}:${{ steps.meta.outputs.VERSION }}
            ${{ env.REGISTRY }}/uniia-com-ua/${{ steps.meta.outputs.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.title=${{ steps.meta.outputs.TITLE }}
            org.opencontainers.image.description=${{ steps.meta.outputs.DESC }}
            org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Update Fleet configuration
        run: |
          echo "üöÄ –û–Ω–æ–≤–ª—é—î–º–æ Fleet –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–ª—è ${{ steps.meta.outputs.TITLE }}..."
          echo "üì¶ –†–µ–ª—ñ–∑: ${{ github.event.release.name }}"
          echo "üè∑Ô∏è  –¢–µ–≥: ${{ github.event.release.tag_name }}"
          echo "üìù –í–µ—Ä—Å—ñ—è: ${{ steps.meta.outputs.VERSION }}"

          git status
          git branch -a

          sed -i "s/newTag: .*/newTag: ${{ steps.meta.outputs.VERSION }}/" ${{ steps.meta.outputs.FLEET_PATH }}/kustomization.yaml
          sed -i "s/APP_VERSION: .*/APP_VERSION: \"${{ steps.meta.outputs.VERSION }}\"/" ${{ steps.meta.outputs.FLEET_PATH }}/configmap.yaml

          echo "–ó–º—ñ–Ω–∏ –≤ Fleet –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:"
          echo "=== kustomization.yaml ==="
          git diff ${{ steps.meta.outputs.FLEET_PATH }}/kustomization.yaml
          echo "=== configmap.yaml ==="
          git diff ${{ steps.meta.outputs.FLEET_PATH }}/configmap.yaml

      - name: Commit and push Fleet changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add ${{ steps.meta.outputs.FLEET_PATH }}/kustomization.yaml ${{ steps.meta.outputs.FLEET_PATH }}/configmap.yaml

          if git diff --staged --quiet; then
            echo "–ù–µ–º–∞—î –∑–º—ñ–Ω –¥–ª—è –∫–æ–º—ñ—Ç—É"
            exit 0
          else
            echo "–ö–æ–º—ñ—Ç–∏–º–æ –∑–º—ñ–Ω–∏..."
            git commit -m "üöÄ [${{ steps.meta.outputs.TITLE }}] –†–µ–ª—ñ–∑ ${{ github.event.release.tag_name }}

            –û–Ω–æ–≤–ª–µ–Ω–æ Fleet –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–æ –≤–µ—Ä—Å—ñ—ó ${{ steps.meta.outputs.VERSION }}

            üì¶ –û–±—Ä–∞–∑: ${{ env.REGISTRY }}/uniia-com-ua/${{ steps.meta.outputs.IMAGE_NAME }}:${{ steps.meta.outputs.VERSION }}
            üîß ConfigMap: –í–µ—Ä—Å—ñ—è APP_VERSION = ${{ steps.meta.outputs.VERSION }}
            üè∑Ô∏è  –†–µ–ª—ñ–∑: ${{ github.event.release.name }}
            üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: ${{ github.event.release.html_url }}

            –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –º–æ–∂–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–µ—Ä—Å—ñ—é —á–µ—Ä–µ–∑ endpoint /ver –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ env –∑–º—ñ–Ω–Ω—É APP_VERSION"
            git push origin main
            echo "‚úÖ Fleet –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π"
          fi

      - name: Update release with deployment info
        uses: actions/github-script@v7
        with:
          script: |
            const releaseBody = context.payload.release.body || '';
            const deploymentInfo = `

            ## üöÄ Deployment Info
            - **Docker Image**: \`${{ env.REGISTRY }}/uniia-com-ua/${{ steps.meta.outputs.IMAGE_NAME }}:${{ steps.meta.outputs.VERSION }}\`
            - **App Version (ENV)**: \`${{ steps.meta.outputs.VERSION }}\`
            - **Version Endpoint**: \`/ver\` (reads from APP_VERSION env)
            - **Fleet Configuration**: Updated automatically
            - **Deployment Status**: ‚úÖ Ready for Fleet sync

            _Auto-deployed via GitHub Actions_`;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: releaseBody + deploymentInfo
            });

      - name: Summary
        run: |
          echo "üéâ ${{ steps.meta.outputs.TITLE }} —É—Å–ø—ñ—à–Ω–æ –∑—ñ–±—Ä–∞–Ω–æ —Ç–∞ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ!"
          echo "üì¶ –û–±—Ä–∞–∑: ${{ env.REGISTRY }}/uniia-com-ua/${{ steps.meta.outputs.IMAGE_NAME }}:${{ steps.meta.outputs.VERSION }}"
          echo "üîß APP_VERSION env: ${{ steps.meta.outputs.VERSION }}"
          echo "üè∑Ô∏è  –†–µ–ª—ñ–∑: ${{ github.event.release.tag_name }}"
          echo "üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–µ–ª—ñ–∑: ${{ github.event.release.html_url }}"
          echo "üìç –í–µ—Ä—Å—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ endpoint /ver"
          echo "üöÄ Fleet –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–≥–æ—Ä–Ω–µ –Ω–æ–≤—É –≤–µ—Ä—Å—ñ—é –≤ –∫–ª–∞—Å—Ç–µ—Ä—ñ"